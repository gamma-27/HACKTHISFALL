// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store{
  id String @id @default(uuid())
  name String
  userId String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  products Product[] @relation("StoreToProduct")
  categories Category[]  @relation("StoreToCategory")
  billboard Billboard[]  @relation("StoreToBillboard")
  orders Order[] @relation("StoreToOrder")
}


model Billboard{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  imageUrl String
    categories Category[] @relation("BillboardToCategory")
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
   
  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products Product[] @relation("CategoryToProduct")
  @@index([storeId])
  @@index([billboardId])
}


model Product {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
 
  images      Image[]   // Relation to Image model
  
  orderItems  OrderItem[]   // Relation to Order model
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])

}

model Image {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  adress String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])

}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  @@index([orderId])
  @@index([productId])
}